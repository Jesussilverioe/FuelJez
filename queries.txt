DROP TABLE Login;
DROP TABLE Profile;
DROP TABLE History;

CREATE TABLE Login(
    email VARCHAR(255) NOT NULL PRIMARY KEY,
    password STRING(255) NOT NULL
);

CREATE TABLE Profile(
    unique_id VARCHAR(255) NOT NULL PRIMARY KEY,
    fullname VARCHAR(255) NOT NULL,
    address1  VARCHAR(255) NOT NULL,
    address2 VARCHAR(255),
    state VARCHAR(255) NOT NULL,
    zipcode INT NOT NULL,
    email VARCHAR(255) NOT NULL,
    FOREIGN KEY (email) REFERENCES Login(email) 
);

CREATE TABLE History (
    order_no INT NOT NULL PRIMARY KEY,
    order_date INT NOT NULL,
    delivery_address VARCHAR(255),
    delivery_date VARCHAR(255),
    gallons_delivered INT NOT NULL,
    price INT NOT NULL,
    unique_id VARCHAR(255) NOT NULL,
    FOREIGN KEY (unique_id) REFERENCES Profile(unique_id) 
);

/////THESE ARE NOTES BELOW

1. get name from teh databse for quotes.html
2. have a universal session aka the email
3. have a checker/table that keeps track if the user has completed their profile or not

inside index previously

        # print('This is the register email: ',session['register-email'])
        # print('This is the login email: ',session['login-email'])

        # if not session['register-email']:
        #     session['login-email'] = request.form['login-email']
        #     session['login-password'] = request.form['login-password']
        #     print('This is the login email: ',session['login-email'])

        # elif not session['login-email']:
        #     session['register-email'] = request.form['register-email']
        #     emailt = session['register-email']
        #     conn = create_connection()
        #     cursor = conn.cursor()
        #     command = f"SELECT COUNT(*) FROM LOGIN WHERE email LIKE '%{emailt}%';"
        #     cursor.execute(command)
        #     count = cursor.fetchone()[0]
        #     if count > 0:
        #       return render_template("index.html")
            

        #     session['register-password'] = request.form['register-password']
        #     session['register-password2'] = request.form['register-password2']
        #     hashedmapa = bcrypt.hashpw(str(session['register-password']).encode('utf-8'), bcrypt.gensalt())
        #     # print(hashedmapa)
        #     hashedmapa = str(hashedmapa)
        #     # print(hashedmapa)
        #     uniqid = genUniqueID(8)
        #     emailt = str(session['register-email'])
        #     print('This is the register email: ',session['register-email'])
        #     print(hashedmapa)
        #     conn = create_connection()
        #     cursor = conn.cursor()
        #     command = f'INSERT INTO Login VALUES("{uniqid}", "{emailt}", "{hashedmapa}")'
        #     cursor.execute(command)
        #     conn.commit()
        #     cursor.close()
            


        # session['register-email'] = request.form['register-email']
        # emailt = session['register-email']
        # conn = create_connection()
        # cursor = conn.cursor()
        # command = f"SELECT COUNT(*) FROM LOGIN WHERE email LIKE '%{emailt}%';"
        # cursor.execute(command)
        # count = cursor.fetchone()[0]
        # if count > 0:
        #   return render_template("index.html")
          

        # session['register-password'] = request.form['register-password']
        # session['register-password2'] = request.form['register-password2']
        # hashedmapa = bcrypt.hashpw(str(session['register-password']).encode('utf-8'), bcrypt.gensalt())
        # print(hashedmapa)
        # hashedmapa = str(hashedmapa)
        # print(hashedmapa)
        # uniqid = genUniqueID(8)
        # emailt = str(session['register-email'])
        # print(hashedmapa)
        # conn = create_connection()
        # cursor = conn.cursor()
        # command = f'INSERT INTO Login VALUES("{uniqid}", "{emailt}", "{hashedmapa}")'
        # cursor.execute(command)
        # conn.commit()
        # cursor.close()


        
        # print(session)
        # return render_template("quotes.html", fullname = session['fullname'], address1 = session['address1'], address2 = session['address2'], state = session['state'], zipcode = session['zipcode'])
        